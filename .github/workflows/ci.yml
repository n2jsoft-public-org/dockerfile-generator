name: ci

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: read
  pull-requests: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (golangci-lint)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: lint
    env:
      COVERAGE_MIN: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Cache build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
          key: build-cache-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            build-cache-${{ runner.os }}-

      - name: Verify go.mod tidiness
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum || (echo 'go.mod/go.sum not tidy; run go mod tidy' && exit 1)

      - name: Build (all packages)
        run: go build ./...

      - name: Vet
        run: go vet ./...

      - name: Tests (race + cover)
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Coverage summary
        run: |
            go tool cover -func=coverage.out | tail -n 1 || true

      - name: Coverage gate
        run: |
          set -euo pipefail
          TOTAL=$(go tool cover -func=coverage.out | grep total: | awk '{print $3}')
          PCT=${TOTAL%%%}
          echo "Total coverage: $PCT% (minimum ${COVERAGE_MIN}%)"
          # numeric compare using awk to handle decimals
          if awk -v c="$PCT" -v m="$COVERAGE_MIN" 'BEGIN{exit (c+0 < m+0)?0:1}'; then
            echo "Coverage below threshold (${COVERAGE_MIN}%). Failing." >&2
            exit 1
          fi
          echo "COVERAGE_PERCENT=$PCT" >> $GITHUB_ENV

      - name: Prepare coverage comment
        if: github.event_name == 'pull_request'
        run: |
          TOTAL=$(go tool cover -func=coverage.out | grep total: | awk '{print $3}')
          {
            echo '### Test Coverage'
            echo ''
            echo "Total: $TOTAL (minimum ${COVERAGE_MIN}%)"
          } > coverage_comment.md

      - name: Post coverage comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: coverage_comment.md

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out
          if-no-files-found: warn

  docker-validate:
    name: Docker Build Validation
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build image (no push)
        run: |
          docker buildx build --platform linux/amd64 -t test-image:pr -f Dockerfile . --load
      - name: Smoke test image
        run: |
          docker run --rm test-image:pr --version || (echo 'Container smoke test failed' && exit 1)

  goreleaser-snapshot:
    name: GoReleaser Snapshot (validation)
    needs: [test, docker-validate]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: GoReleaser config check
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: check

      - name: GoReleaser snapshot build
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --snapshot --skip=publish --skip=announce --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-snapshot
          path: dist
          if-no-files-found: error
