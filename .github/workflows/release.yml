name: release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: {}

permissions:
  contents: write
  packages: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Build (sanity)
        run: go build -o /tmp/sanity ./...

      - name: GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push (multi-arch)
        shell: bash
        env:
          REPO: ghcr.io/${{ github.repository }}
        run: |
          set -euo pipefail
          echo "Ref name: $GITHUB_REF_NAME"
          VERSION="${GITHUB_REF_NAME#v}"
          MAJOR="${VERSION%%.*}"
          REMAINDER="${VERSION#${MAJOR}.}"
          MINOR="${REMAINDER%%.*}"
          DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          TAG_ARGS=( -t "${REPO}:${GITHUB_REF_NAME}" -t "${REPO}:latest" -t "${REPO}:v${MAJOR}" )
          if [[ "$MINOR" != "$VERSION" ]]; then TAG_ARGS+=( -t "${REPO}:v${MAJOR}.${MINOR}" ); fi
          echo "Building tags: ${TAG_ARGS[*]}"
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            "${TAG_ARGS[@]}" \
            --build-arg VERSION="${VERSION}" \
            --build-arg COMMIT="${GITHUB_SHA}" \
            --build-arg DATE="${DATE}" \
            -f Dockerfile . \
            --push
          echo "Image build & push complete."
